/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

import { dataSourcesInfo } from '../../../.power/appschemas/dataSourcesInfo';
import type { IOperationResult } from '@microsoft/power-apps/data';
import { getClient } from '@microsoft/power-apps/data';
import type { IGetOptions, IGetAllOptions } from '../models/CommonModels';
import type { Contacts } from '../models/ContactsModel';

export class ContactsService {
  private static readonly dataSourceName = 'contacts';

  private static readonly client = getClient(dataSourcesInfo);

  public static async create(record: Omit<Contacts, 'contactid'>): Promise<IOperationResult<Contacts>> {
    const result = await ContactsService.client.createRecordAsync<Omit<Contacts, 'contactid'>, Contacts>(
      ContactsService.dataSourceName,
      record
    );
    return result;
  }

  public static async update(id: string, changedFields: Partial<Omit<Contacts, 'contactid'>>): Promise<IOperationResult<Contacts>> {
    const result = await ContactsService.client.updateRecordAsync<Partial<Omit<Contacts, 'contactid'>>, Contacts>(
      ContactsService.dataSourceName,
      id.toString(),
      changedFields
    );
    return result;
  }

  public static async delete(id: string): Promise<void> {
    await ContactsService.client.deleteRecordAsync(
      ContactsService.dataSourceName,
      id.toString());
  }

  public static async get(id: string, options?: IGetOptions): Promise<IOperationResult<Contacts>> {
    const result = await ContactsService.client.retrieveRecordAsync<Contacts>(
      ContactsService.dataSourceName,
      id.toString(),
      options
    );
    return result;
  }

  public static async getAll(options?: IGetAllOptions): Promise<IOperationResult<Contacts[]>> {
    const result = await ContactsService.client.retrieveMultipleRecordsAsync<Contacts>(
      ContactsService.dataSourceName,
      options
    );
    return result;
  }
}
